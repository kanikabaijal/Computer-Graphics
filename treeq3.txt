#include <GL/glut.h>
#include<windows.h>
#include<stdio.h>
#include<math.h>
#include<string.h>
#include<time.h>


 char s[7]="F[]";//declare string globally
 char a[2];
 int k;
char r[7]="AF";
float x =0; float y=50;
//strcpy(r,s);  
const int   A = 1000;  /* length of a side of the monitor window */
const float B = 500;  /* length of a side of the clipping rectangle */
const float C = 200;  /* length of a side of the square the program draws */
void myinit(void)
{
  glClearColor(0.7, 0.7, 1.0, 0.0); /* gray background */
  glMatrixMode(GL_PROJECTION);      /* In World coordinates: */
  glLoadIdentity();                 /* position the "clipping rectangle" */
  gluOrtho2D( -B/2, B/2, -B/2, B/2);/* at -B/2, its right edge at +B/2, its bottom */
  glMatrixMode(GL_MODELVIEW);       /* edge at -B/2 and its top edge at +B/2 */
}
void draw(float x,float y)
{
    //glLoadIdentity();
    glBegin(GL_LINES);          
           //glTranslatef(x,y+10,0);
           glVertex2f (0,0);   
           glVertex2f(x,y);
           glEnd();
           glFlush();
           glPushMatrix(); 
           sleep(250);
}

void rotate_r(float x,float y)  //function to rotate the line to the right
{
     //glTranslatef(x,y+10,0);
     glRotatef(0.12,0,0,1);
     glPushMatrix();    
     draw(x+10,y+10);
     glPopMatrix();
      glPushMatrix();
}

void rotate_l(float x,float y)     //function to rotate the line towards left
{       
     //glTranslatef(x,y+10,0);   
     glRotatef(0.52,0,0,1);
     glPushMatrix();
     draw(x-10,y-10);
     glPopMatrix();
     glPushMatrix();
}
void compare()             //function to compare the string with the production rulesv
     {
             for(k=0;r[k]!='\0';k++)                
     {
             a[0]=r[k];
             a[1]='\0';
             
     if(!(strcmp(a,"F")))
     {
             draw(x,y);
             glTranslatef(x,y,0);
     }
     if(!(strcmp(a,"[")))
    {
                    rotate_r(x,y);
    }
    if(!(strcmp(a,"]")))
    {
       rotate_l(x,y);
    }                          
}
}
void expand()                      //this function checks for the production rules character for calling other functions based on which rule encountered
{
     
     int k=0;
     for(k=0;r[k]!='\0';k++)
     {
     if(r[k]=='A')
     {
                  draw(x,y);
                  
     }
      else
      if(r[k]=='F')
      strcpy(r,s);
      compare();
  }
  }
  
                                         
    
  
    
         
void display(void)
{
     int k=0;
     int i=0;
  //   float x=0;
  //   float y=100;           //
  //   char s[7]="F[f]F";//declare string globally    
        
        char a[2];
    glClear(GL_COLOR_BUFFER_BIT);     /* clear the window */
 
     glMatrixMode(GL_MODELVIEW);       /* The following coordinates are expressed */
     
            /* glTranslatef(x,y+10,0);
           glRotatef(.52,0,0,1);*/
            glColor3f(0,0,0);
            //compare();
            for(i=0;i<2;i++)
            expand();
            
          
           
           glEnd();
           glFlush();                         
}
int main(int argc, char** argv)
{
  glutInit(&argc,argv);
  glutInitWindowSize( A, A );       /* A x A pixel screen window  */

  glutInitDisplayMode( GLUT_RGB | GLUT_SINGLE);
  glutCreateWindow("L system"); /* window title                   */
   
  glutDisplayFunc(display);         /* tell OpenGL main loop what     */
    myinit();                     

  glutMainLoop();
  int i;
  glutIdleFunc(expand);
                     /* pass control to the main loop  */
}
