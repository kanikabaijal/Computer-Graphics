
#include <GL/gl.h>
#include <GL/glut.h>
#include <stdlib.h>
#include <math.h>
float xpos=0,ypos=0,zpos=0;
float xrot=0,yrot=0,zrot=0;

void myinit(void)	//initialise toolkit
{
  glClearColor(0.1, 0.7, 0.7, 0.0); // background color==blue 
  gluOrtho2D( -550, 550, -550, 550);// setting up of cocrdinate
  glMatrixMode(GL_MODELVIEW);      //model coordinate
}

class Point3{
public: 
	float x,y,z; 

	void set(float dx, float dy, float dz){x = dx; y = dy; z = dz;} 
    void set(Point3& p) {x = p.x; y = p.y; z = p.z;} 

	Point3(float xx, float yy, float zz) {x = xx; y = yy; z = zz;} 
	Point3() {x = y = z = 0;} 
	void build4tuple(float v[ ]) 
	{   
		v[0] = x; v[1] = y; v[2] = z; v[3] = 1.0f; 
	} 
};

class Vector3{ 
public:   
	float x,y,z; 

	void set(float dx, float dy, float dz){ x=dx; y=dy; z=dz;} 
	void setv(Vector3 &v){ x = v.x; y = v.y; z = v.z;} 
	void flip(){x = -x; y = -y; z = -z;}  
	void setDiff(Point3& a, Point3& b)
	{ x =a.x - b.x; y =a.y - b.y; z =a.z - b.z;} 
	void normalize(){
    float a=sqrt((x*x)+(y*y))+(z*z);
    x=x/a;
    y=y/a;
    z=z/a;}//adjust this vector to unit length 

	Vector3(float xx, float yy, float zz){x = xx; y = yy; z = zz;} 
	Vector3(Vector3& v){x = v.x; y = v.y; z = v.z;} 
	Vector3(){x = y = z = 0;} //default constructor s

	Vector3 cross(Vector3 &b){
          x=(y * (b.z)) - (z * (b.y));
          y=(z*(b.x) )- (x * (b.z));
          z = (x * (b.y)) - (y * (b.x));
          } //return this cross b 
	float dot(Vector3 b){return ((x*(b.x))+(y*(b.y))+(z*(b.z)));} // return this dotted with b 
}; 

class Camera{  
private:
	Point3 eye;
	Vector3 u, v, n;
	//view volume shape
	double viewAngle, aspect, nearDist, farDist; 
public:
	Camera(); 
	void set(Point3 eye, Point3 look, Vector3 up); 
    void setModelviewMatrix(void);
};
void Camera::set(Point3 Eye, Point3 look, Vector3 up)
{	// create a modelview matrix and send it to OpenGL
	eye.set(Eye); // store the given eye position
	n.set(eye.x - look.x, eye.y - look.y, eye.z - look.z); 
	// make n
	up.cross(n);
	u.setv(up); // make u = up X n
	n.normalize(); u.normalize();
    n.cross(u); // make them unit length
    v.setv(n);  // make v =  n X u 
}
void Camera :: setModelviewMatrix(void)
{ // load modelview matrix with existing camera values
	float m[16];
	Vector3 eVec(eye.x, eye.y, eye.z); // a vector 
						  // version of eye 
	m[0]= u.x; m[4]= u.y; m[8]= u.z; m[12]= -eVec.dot(u);
	m[1]= v.x; m[5]= v.y; m[9]= v.z; m[13]= -eVec.dot(v);
	m[2]= n.x; m[6]= n.y; m[10]= n.z; m[14]= -eVec.dot(n);
	m[3]=  0;  m[7]=  0;  m[11]=  0; m[15]= 1.0;
	glMatrixMode(GL_MODELVIEW);
	glLoadMatrixf(m); // load OpenGL’s modelview matrix 
}


void Camera:: slide(float delU, float delV, float delN)
{
	eye.x += delU * u.x + delV * v.x + delN * n.x;
	eye.y += delU * u.y + delV * v.y + delN * n.y;
	eye.z += delU * u.z + delV * v.z + delN * n.z;
	setModelViewMatrix();
}

void Camera :: roll (float angle)
{ // roll the camera through angle degrees
	float cs = cos(3.14159265/180 * angle); 
		
	//convert degrees to radians
	float sn = sin(3.14159265/180 * angle);
	Vector3 t(u); // remember old u
	u.set(cs*t.x - sn*v.x, cs*t.y - sn*v.y, cs*t.z - sn*v.z);
	v.set(sn*t.x + cs*v.x, sn*t.y + cs*v.y, sn*t.z + cs*v.z);
	setModelViewMatrix();
}
void leg()                          // constructs a leg//
{   glPushMatrix();
     glColor3f(1,0,0); 
     glScalef(0.1,.6,0.1);
     glutSolidCube(1);  
     glPopMatrix(); 
}
void table()                       // constructs a table at origin//
{      
     leg();
     glTranslatef(-0.5,0,0);
     leg();
     glTranslatef(0,0,-1);
     leg();
     glTranslatef(.5,0,0);
     leg();
     glPushMatrix();
     glColor3f(1.0,1.0,1.0);
     glTranslatef(-0.25,.35,0.5);
     glScalef(0.7,0.1,1.2);
     glutSolidCube(1);
     glPopMatrix(); 
}
void table_row()
{
     table();
     glTranslatef(0,0,3);
     table();
     glTranslatef(0,0,3);
     table();
     glTranslatef(0,0,3);
     table();
}
void table_column()
{
     table_row();
     glTranslatef(3,0,0);
     table_row();
}
void ceiling()
{
    glPushMatrix();
    glRotatef(90.0,0.0,0.0,1.0);
    glColor3f(.627f,.322f,0.176f);
    glTranslatef(3.0,-3.0,0.0);
    glScalef(1.0f,5.0f,10.0f);
    glutSolidCube(1.0);
    glPopMatrix();
}
void enable()
{   
    glEnable(GL_DEPTH_TEST);
    glEnable(GL_LIGHTING);
    glEnable(GL_LIGHT0);
	glEnable(GL_NORMALIZE);
	glEnable(GL_COLOR_MATERIAL);
}
void display (void)
{ 				                              
    glClear(GL_COLOR_BUFFER_BIT);  
    glMatrixMode(GL_MODELVIEW);      
    glLoadIdentity();   //load the matrix
  //gluLookAt(X1,Y1,Z1,0.0,0.0,0.0,0.0,1.0,0.0);
    Camera c();	
    roll();
    yaw();
    pitch();
    glColor3f(1,1,1);   //clear the window
  //  glBegin(GL_QUADS);
     glClear (GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); //clear the color buffer and the depth buffer
     glColor3f(1,0,0);
     GLfloat ambientLight[] = {0.3f, 0.3f, 0.3f, 1.0f};
   	glLightModelfv(GL_LIGHT_MODEL_AMBIENT, ambientLight);
	
	GLfloat lightColor[] = {1.0f, 1.0f, 1.0f, 1.0f};
	GLfloat lightPos[] = {0.0,0.0,-3.0, 1.0f};
	glLightfv(GL_LIGHT0, GL_DIFFUSE, lightColor);
	glLightfv(GL_LIGHT0, GL_POSITION, lightPos);
  
    glRotatef(xrot,1,0,0);
    glRotatef(yrot,0,1,0);
    glRotatef(zrot,0,0,1);
    glTranslatef(xpos+1,0,0);
    glTranslatef(0,ypos+1,0);
    glTranslatef(0,0,zpos+1);
    enable();
    table_column();   
    gluLookAt ( 1.3, 1.3, 2.0,   0.0, 0.25, 0.0,   0.0, 1.0, 0.0 );
    glutSwapBuffers(); //swap the buffers
     glFlush(); //passes the actions into the pipeline
                         
}
void keyboard (unsigned char key, int x, int y) 
{ 
      switch(key)
{
    case 'x': 
         {
         xpos += .1;
         break; 
         }   
   
   case 'l':
        { 
        xpos-= .1;
        break;
        }

   case 'm':
        { 
        ypos-= .1;
        break;
        }
   case 'n':
        {
        zpos-= .1;
        break;
        }
   case 'y':
        {
        ypos += .1;
        break;
        }   
   case 'z':
        {
        zpos += .1;
        break;
        } 
    case 'r':
        {
        xrot -= 6;
        if (xrot < -360) xrot += 360;
        }
        break;
    case 'f':
         {
         xrot += 6;
         if (xrot > 360) xrot += 360;
         }
         break;
     case 'w':
          {
         zrot -= 6;
         if (zrot < -360) zrot += 360;
         }
         break;
     case 's':
          {
        zrot += 6;
        if (zrot > 360) zrot += 360;
        }
         break;
    case 'd' :
    {
    yrot += 6;
    if (yrot >360) yrot -= 360;
    }
   break;
    case 'a':
    {
    yrot -= 6;
    if (yrot < -360)yrot += 360;
    }
    break;
    case 27:
    {
    exit(0);
    }
}
}
int main (int argc, char **argv) {
    glutInit (&argc, argv);
    glutInitDisplayMode (GLUT_DOUBLE | GLUT_DEPTH); //set the display to Double buffer, with depth
    //glutInitWindowSize (1500,1500); //set the window size
    glutInitWindowPosition (200, 200); //set the position of the window
    glutCreateWindow ("A basic OpenGL Window"); //the caption of the window
    myinit(); //call the init function
    glutDisplayFunc (display); //use the display function to draw everything
    glutIdleFunc (display); //update any variables in display, display can be changed to anyhing, as long as you move the variables to be updated, in this case, angle++;
    //glutReshapeFunc (reshape); //reshape the window accordingly

    glutKeyboardFunc (keyboard); //check the keyboard
    glutMainLoop (); //call the main loop
    return 0;
}

